{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "plugins": [
    "@typescript-eslint"
  ],
  "parserOptions": {
    "ecmaVersion": 8,
    "sourceType": "module",

    // Path to our tsconfig for rules that require type checking
    "project": "./tsconfig.json"
  },
  "rules": {

        // TypeScript ESLint Rules.  Legend
        // âœ… - recommended
        // ðŸ”’ - strict
        // ðŸ”§ - fixable
        // ðŸ›  - has-suggestions
        // ðŸ’­ - requires type information

        ////////////////////////////////////////////////////////////////////////
        // Supported Rules

        // Require that member overloads be consecutive âœ…
        "@typescript-eslint/adjacent-overload-signatures": "error",

        // Require using either T[] or Array<T> for arrays ðŸ”’ ðŸ”§
        "@typescript-eslint/array-type": "off", // We agreed this should be developer preference

        // Disallow awaiting a value that is not a Thenable âœ…  ðŸ’­
        "@typescript-eslint/await-thenable": "error",

        // Disallow @ts-<directive> comments or require descriptions after directive âœ…
        "@typescript-eslint/ban-ts-comment": [ "off", {
          "ts-ignore": "allow-with-description",
          "ts-check": true
        } ], // TODO: Chip way as dev team. 415 errors

        // Disallow // tslint:<rule-flag> comments ðŸ”’ ðŸ”§
        "@typescript-eslint/ban-tslint-comment": "error",

        // Disallow certain types âœ… ðŸ”§
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              "Omit": {
                "message": "Prefer StrictOmit for type safety",
                "fixWith": "StrictOmit"
              }
            },
            "extendDefaults": true
          }
        ],

        // Enforce that literals on classes are exposed in a consistent style ðŸ”’ ðŸ”§
        "@typescript-eslint/class-literal-property-style": "off", // This rule is not compatible with our mixin strategy, see https://github.com/phetsims/chipper/issues/1279

        // Enforce specifying generic type arguments on type annotation or constructor name of a constructor call ðŸ”’ ðŸ”§
        "@typescript-eslint/consistent-generic-constructors": "error", // It seems preferable to specify the type parameters at the `new` instantiation site

        // Require or disallow the Record type ðŸ”’ ðŸ”§
        "@typescript-eslint/consistent-indexed-object-style": "error",

        // Enforce consistent usage of type assertions ðŸ”’
        "@typescript-eslint/consistent-type-assertions": "error",

        // Enforce type definitions to consistently use either interface or type ðŸ”’ ðŸ”§
        "@typescript-eslint/consistent-type-definitions": [ "error", "type" ], // We prefer using Type-Alias

        // Enforce consistent usage of type exports  ðŸ”§ ðŸ’­
        "@typescript-eslint/consistent-type-exports": "off", // We did not observe a performance boost, nor do we see a significant benefit from this rule. See https://github.com/phetsims/chipper/issues/1283

        // Enforce consistent usage of type imports  ðŸ”§
        "@typescript-eslint/consistent-type-imports": "off", // We did not observe a performance boost, nor do we see a significant benefit from this rule. See https://github.com/phetsims/chipper/issues/1283

        // Require explicit return types on functions and class methods
        "@typescript-eslint/explicit-function-return-type": "off", // We want to use inference on local arrow functions. We use explicit-method-return-type for the important cases.

        // Require explicit accessibility modifiers on class properties and methods  ðŸ”§
        "@typescript-eslint/explicit-member-accessibility": "error",

        // Require explicit return and argument types on exported functions" and classes" public class methods
        "@typescript-eslint/explicit-module-boundary-types": "error",

        // Require a specific member delimiter style for interfaces and type literals  ðŸ”§
        "@typescript-eslint/member-delimiter-style": "error", // semi colons in type declarations.

        // Require a consistent member declaration order
        "@typescript-eslint/member-ordering": "off", // We agreed to leave this rule off because it is more important to sort semantically than alphabetically

        // Enforce using a particular method signature syntax  ðŸ”§
        "@typescript-eslint/method-signature-style": "off", // We agreed to leave this as developer preference.  Some developers prefer to use method style in interfaces and property style in types, but the rule doesn"t support that option.

        // Enforce naming conventions for everything across a codebase   ðŸ’­
        "@typescript-eslint/naming-convention": "off", // TODO: We should decide on the conventions and enable this rule.

        // Require .toString() to only be called on objects which provide useful information when stringified ðŸ”’  ðŸ’­
        "@typescript-eslint/no-base-to-string": "error",

        // Disallow non-null assertion in locations that may be confusing ðŸ”’ ðŸ”§ ðŸ› 
        "@typescript-eslint/no-confusing-non-null-assertion": "error",

        // Require expressions of type void to appear in statement position  ðŸ”§ ðŸ›  ðŸ’­
        "@typescript-eslint/no-confusing-void-expression": "off", // It transforms `() => this.update()` to `() => { this.update(); }`, so is it really desirable?  Errors in 200 files

        // Disallow duplicate enum member values ðŸ”’ ðŸ› 
        "@typescript-eslint/no-duplicate-enum-values": "error",

        // Disallow using the delete operator on computed key expressions ðŸ”’ ðŸ”§
        "@typescript-eslint/no-dynamic-delete": "off", // TODO: Code should use Map or Set instead.  22 failures at the moment.  We would like to enable this rule.

        // Disallow the declaration of empty interfaces âœ… ðŸ”§ ðŸ› 
        "@typescript-eslint/no-empty-interface": "error",

        // Disallow the any type âœ… ðŸ”§ ðŸ› 
        "@typescript-eslint/no-explicit-any": "error",

        // Disallow extra non-null assertion âœ… ðŸ”§
        "@typescript-eslint/no-extra-non-null-assertion": "error",

        // Disallow classes used as namespaces ðŸ”’
        "@typescript-eslint/no-extraneous-class": "off", // It is sometimes useful to have a class with static methods that can call each other

        // Require Promise-like statements to be handled appropriately âœ… ðŸ›  ðŸ’­
        "@typescript-eslint/no-floating-promises": "error",

        // Disallow iterating over an array with a for-in loop âœ…  ðŸ’­
        "@typescript-eslint/no-for-in-array": "error",

        // Disallow usage of the implicit any type in catch clauses  ðŸ”§ ðŸ› 
        "@typescript-eslint/no-implicit-any-catch": "off", // Deprecated rule

        // Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean âœ… ðŸ”§
        "@typescript-eslint/no-inferrable-types": "error",

        // Disallow void type outside of generic or return types ðŸ”’
        "@typescript-eslint/no-invalid-void-type": "error",

        // Disallow the void operator except when used to discard a value ðŸ”’ ðŸ”§ ðŸ›  ðŸ’­
        "@typescript-eslint/no-meaningless-void-operator": "error",

        // Enforce valid definition of new and constructor âœ…
        "@typescript-eslint/no-misused-new": "error",

        // Disallow Promises in places not designed to handle them âœ…  ðŸ’­
        "@typescript-eslint/no-misused-promises": "off", // TODO: Discuss this rule.  6 failures

        // Disallow custom TypeScript modules and namespaces âœ…
        "@typescript-eslint/no-namespace": "error",

        // Disallow non-null assertions in the left operand of a nullish coalescing operator ðŸ”’ ðŸ› 
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",

        // Disallow non-null assertions after an optional chain expression âœ… ðŸ› 
        "@typescript-eslint/no-non-null-asserted-optional-chain": "error",

        // Disallow non-null assertions using the ! postfix operator âœ… ðŸ› 
        "@typescript-eslint/no-non-null-assertion": "off", // We do not support this rule, see https://github.com/phetsims/chipper/issues/1114#issuecomment-1099536133

        // Disallow the use of parameter properties in class constructors
        "@typescript-eslint/no-parameter-properties": "off", // This rule is deprecated.

        // Disallow members of unions and intersections that do nothing or override type information   ðŸ’­
        "@typescript-eslint/no-redundant-type-constituents": "off",

        // Disallow invocation of require()
        "@typescript-eslint/no-require-imports": "error",

        // Disallow aliasing this âœ…
        "@typescript-eslint/no-this-alias": "error",

        // Disallow type aliases
        "@typescript-eslint/no-type-alias": "off", // We use type-alias frequently and prefer them over interfaces

        // Disallow unnecessary equality comparisons against boolean literals ðŸ”’ ðŸ”§ ðŸ’­
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",

        // Disallow conditionals where the type is always truthy or always falsy ðŸ”’ ðŸ”§ ðŸ’­
        "@typescript-eslint/no-unnecessary-condition": "off", // TODO: Would be nice to enable but 500 problems may prevent us

        // Disallow unnecessary namespace qualifiers  ðŸ”§ ðŸ’­
        "@typescript-eslint/no-unnecessary-qualifier": "off", // TODO: Enable this rule

        // Disallow type arguments that are equal to the default ðŸ”’ ðŸ”§ ðŸ’­
        "@typescript-eslint/no-unnecessary-type-arguments": "error",

        // Disallow type assertions that do not change the type of an expression âœ… ðŸ”§ ðŸ’­
        "@typescript-eslint/no-unnecessary-type-assertion": "error",

        // Disallow unnecessary constraints on generic types âœ… ðŸ› 
        "@typescript-eslint/no-unnecessary-type-constraint": "error",

        // Disallow calling a function with a value with type any âœ…  ðŸ’­
        "@typescript-eslint/no-unsafe-argument": "off", // TODO: We should enable this rule, but it may be tricky since some of the any come from JS files. 412 failures

        // Disallow assigning a value with type any to variables and properties âœ…  ðŸ’­
        "@typescript-eslint/no-unsafe-assignment": "off", // TODO: Enable this rule since it will help us avoid any.  547 problems, will need to chip-away

        // Disallow calling a value with type any âœ…  ðŸ’­
        "@typescript-eslint/no-unsafe-call": "off", // TODO: Enable this rule since it will help us avoid any

        // Disallow member access on a value with type any âœ…  ðŸ’­
        "@typescript-eslint/no-unsafe-member-access": "off", // TODO: Enable this rule since it will help us avoid any

        // Disallow returning a value with type any from a function âœ…  ðŸ’­
        "@typescript-eslint/no-unsafe-return": "off", // TODO: Enable this rule since it will help us avoid any

        // Disallow empty exports that don"t change anything in a module file  ðŸ”§ ðŸ› 
        "@typescript-eslint/no-useless-empty-export": "error",

        // Disallow require statements except in import statements âœ…
        "@typescript-eslint/no-var-requires": "error",

        // Enforce non-null assertions over explicit type casts ðŸ”’ ðŸ”§ ðŸ’­
        "@typescript-eslint/non-nullable-type-assertion-style": "error",

        // Require or disallow parameter properties in class constructors
        "@typescript-eslint/parameter-properties": "off", // TODO: Let"s discuss as a team. 16 failures.  Discuss parameter properties to discuss with the team.  Write up results in the typescript-conventions doc

        // Enforce the use of as const over literal type âœ… ðŸ”§ ðŸ› 
        "@typescript-eslint/prefer-as-const": "error",

        // Require each enum member value to be explicitly initialized  ðŸ› 
        "@typescript-eslint/prefer-enum-initializers": "error",

        // Enforce the use of for-of loop over the standard for loop where possible ðŸ”’
        "@typescript-eslint/prefer-for-of": "off", // TODO: We agreed to enable this rule.  It will require chip-away since it has no autofix.  289 failures.

        // Enforce using function types instead of interfaces with call signatures ðŸ”’ ðŸ”§
        "@typescript-eslint/prefer-function-type": "off", // TODO: We agreed to enable this rule.  4 failures can be autofixed.

        // Enforce includes method over indexOf method ðŸ”’ ðŸ”§ ðŸ’­
        "@typescript-eslint/prefer-includes": "error",

        // Require all enum members to be literal values ðŸ”’
        "@typescript-eslint/prefer-literal-enum-member": "error",

        // Require using namespace keyword over module keyword to declare custom TypeScript modules âœ… ðŸ”§
        "@typescript-eslint/prefer-namespace-keyword": "error",

        // Enforce using the nullish coalescing operator instead of logical chaining ðŸ”’ ðŸ›  ðŸ’­
        "@typescript-eslint/prefer-nullish-coalescing": "off", // TODO: Enable rule

        // Enforce using concise optional chain expressions instead of chained logical ands ðŸ”’ ðŸ› 
        "@typescript-eslint/prefer-optional-chain": "off", // TODO: We would like to discuss as a team.  It seems easier to read and write, so we would like to pursue it. 3227 failures.  Many cases may be assertions.  But some developers may want to use && in some cases.

        // Require private members to be marked as readonly if they"re never modified outside of the constructor  ðŸ”§ ðŸ’­
        "@typescript-eslint/prefer-readonly": "off",

        // Require function parameters to be typed as readonly to prevent accidental mutation of inputs   ðŸ’­
        "@typescript-eslint/prefer-readonly-parameter-types": "off",

        // Enforce using type parameter when calling Array#reduce instead of casting ðŸ”’ ðŸ”§ ðŸ’­
        "@typescript-eslint/prefer-reduce-type-parameter": "off", // TODO: Enable this rule

        // Enforce RegExp#exec over String#match if no global flag is provided  ðŸ”§ ðŸ’­
        "@typescript-eslint/prefer-regexp-exec": "off",

        // Enforce that this is used when only this type is returned ðŸ”’ ðŸ”§ ðŸ’­
        "@typescript-eslint/prefer-return-this-type": "off",

        // Enforce using String#startsWith and String#endsWith over other equivalent methods of checking substrings ðŸ”’ ðŸ”§ ðŸ’­
        "@typescript-eslint/prefer-string-starts-ends-with": "error",

        // Enforce using @ts-expect-error over @ts-ignore ðŸ”’ ðŸ”§
        "@typescript-eslint/prefer-ts-expect-error": "off", // TODO: Investigate. 565 failures

        // Require any function or method that returns a Promise to be marked async  ðŸ”§ ðŸ’­
        "@typescript-eslint/promise-function-async": "off",

        // Require Array#sort calls to always provide a compareFunction   ðŸ’­
        "@typescript-eslint/require-array-sort-compare": "off",

        // Require both operands of addition to have type number or string âœ…  ðŸ’­
        "@typescript-eslint/restrict-plus-operands": "off",

        // Enforce template literal expressions to be of string type âœ…  ðŸ’­
        "@typescript-eslint/restrict-template-expressions": "off",

        // Enforce members of a type union/intersection to be sorted alphabetically  ðŸ”§ ðŸ› 
        "@typescript-eslint/sort-type-union-intersection-members": "off", // We agreed to sort things semantically rather than alphabetically

        // Disallow certain types in boolean expressions  ðŸ”§ ðŸ›  ðŸ’­
        "@typescript-eslint/strict-boolean-expressions": "off", // TODO: Is this a good rule for our team?

        // Require switch-case statements to be exhaustive with union type  ðŸ›  ðŸ’­
        "@typescript-eslint/switch-exhaustiveness-check": "off", // TODO: Enable rule

        // Disallow certain triple slash directives in favor of ES6-style import declarations âœ…
        "@typescript-eslint/triple-slash-reference": "error",

        // Require consistent spacing around type annotations  ðŸ”§
        "@typescript-eslint/type-annotation-spacing": "off", // TODO: Investigate.  7 failures

        // Require type annotations in certain places
        "@typescript-eslint/typedef": "error",

        // Enforce unbound methods are called with their expected scope âœ…  ðŸ’­
        "@typescript-eslint/unbound-method": "off",

        // Disallow two overloads that could be unified into one with a union or an optional/rest parameter ðŸ”’
        "@typescript-eslint/unified-signatures": "off", // TODO: Investigate. Probably enable. 6 failures

        ////////////////////////////////////////////////////////////////////////
        // Extension Rules
        // In some cases, ESLint provides a rule itself, but it doesn"t support TypeScript syntax; either it crashes, or
        // it ignores the syntax, or it falsely reports against it. In these cases, we create what we call an extension
        // rule; a rule within our plugin that has the same functionality, but also supports TypeScript.

        // You must disable the base rule to avoid duplicate/incorrect errors. TODO: Is that still necessary?

        // Enforce consistent brace style for blocks  ðŸ”§
        "brace-style": "off",
        "@typescript-eslint/brace-style": [ "error", "stroustrup", { "allowSingleLine": true } ],

        // Require or disallow trailing commas  ðŸ”§
        "comma-dangle": "off",
        "@typescript-eslint/comma-dangle": "error",

        // Enforce consistent spacing before and after commas  ðŸ”§
        "comma-spacing": "off",
        "@typescript-eslint/comma-spacing": "error",

        // Enforce default parameters to be last
        "default-param-last": "off",
        "@typescript-eslint/default-param-last": "error",

        // Enforce dot notation whenever possible ðŸ”’ ðŸ”§ ðŸ’­
        "dot-notation": "off",
        "@typescript-eslint/dot-notation": "error",

        // Require or disallow spacing between function identifiers and their invocations  ðŸ”§
        "func-call-spacing": "off",
        "@typescript-eslint/func-call-spacing": "error",

        // Enforce consistent indentation  ðŸ”§
        "indent": "off",
        "@typescript-eslint/indent": "off", // This rule has 151023 failures, perhaps it is incompatible with our formatting

        // Require or disallow initialization in variable declarations
        "init-declarations": "off",
        "@typescript-eslint/init-declarations": "off", // 237 Failures

        // Enforce consistent spacing before and after keywords  ðŸ”§
        "keyword-spacing": "off",
        "@typescript-eslint/keyword-spacing": [ "error", { // TODO: Check this rule
          "before": true,
          "after": true,
          "overrides": {
            "case": { "after": true }, // default
            "switch": { "after": false },
            "catch": { "after": false }
          }
        } ],

        // Require or disallow an empty line between class members  ðŸ”§
        "lines-between-class-members": "off",
        "@typescript-eslint/lines-between-class-members": "off", // Probably leave this off, it has 2775 failures

        // Disallow generic Array constructors âœ… ðŸ”§
        "no-array-constructor": "off",
        "@typescript-eslint/no-array-constructor": "error",

        // Disallow duplicate class members
        "no-dupe-class-members": "off",
        "@typescript-eslint/no-dupe-class-members": "error",

        // Disallow duplicate imports
        "no-duplicate-imports": "off",
        "@typescript-eslint/no-duplicate-imports": "off", // TODO: Deprecated. Investigate this instead https://github.com/import-js/eslint-plugin-import/blob/HEAD/docs/rules/no-duplicates.md

        // Disallow empty functions âœ…
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": "error",

        // Disallow unnecessary parentheses  ðŸ”§
        "no-extra-parens": "off",
        "@typescript-eslint/no-extra-parens": "off", // we find that extraneous parentheses sometimes improve readability

        // Disallow unnecessary semicolons âœ… ðŸ”§
        "no-extra-semi": "off",
        "@typescript-eslint/no-extra-semi": "error",

        // Disallow the use of eval()-like methods âœ…  ðŸ’­
        "no-implied-eval": "off",
        "@typescript-eslint/no-implied-eval": "off",

        // Disallow this keywords outside of classes or class-like objects
        "no-invalid-this": "off",
        "@typescript-eslint/no-invalid-this": "error",

        // Disallow function declarations that contain unsafe references inside loop statements
        "no-loop-func": "off",
        "@typescript-eslint/no-loop-func": "error",

        // Disallow literal numbers that lose precision âœ…
        "no-loss-of-precision": "off",
        "@typescript-eslint/no-loss-of-precision": "error",

        // Disallow magic numbers
        "no-magic-numbers": "off",
        "@typescript-eslint/no-magic-numbers": "off", // We have many magic numbers

        // Disallow variable redeclaration
        "no-redeclare": "off",
        "@typescript-eslint/no-redeclare": "error",

        // Disallow specified modules when loaded by import
        "no-restricted-imports": "off",
        "@typescript-eslint/no-restricted-imports": "error",

        // Disallow variable declarations from shadowing variables declared in the outer scope
        "no-shadow": "off",
        "@typescript-eslint/no-shadow": "off", // Disabled for the same reason as in the JS Code. 173 failures

        // Disallow throwing literals as exceptions ðŸ”’  ðŸ’­
        "no-throw-literal": "off",
        "@typescript-eslint/no-throw-literal": "off", // TODO: Enable rule

        // Disallow unused expressions
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-expressions": "off", // See notes below

        // Disallow unused variables âœ…
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": [ "error", {

          // We don"t want to turn this on because of the example in https://github.com/phetsims/chipper/issues/1230#issuecomment-1185843199
          "args": "none"
        } ],

        // Disallow the use of variables before they are defined
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": "off", // We often declare auxiliary classes at the bottom of a file, which are used in the primary class

        // Disallow unnecessary constructors ðŸ”’
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": "off", // We determined the useless constructors are good for documentation and clarity.

        // Enforce consistent spacing inside braces  ðŸ”§
        "object-curly-spacing": "off",
        "@typescript-eslint/object-curly-spacing": [ "error", "always" ],

        // Require or disallow padding lines between statements  ðŸ”§ ðŸ› 
        "padding-line-between-statements": "off",
        "@typescript-eslint/padding-line-between-statements": "error",

        // Enforce the consistent use of either backticks, double, or single quotes  ðŸ”§
        "quotes": "off",
        "@typescript-eslint/quotes": [ "error", "single" ],

        // Disallow async functions which have no await expression âœ…  ðŸ’­
        "require-await": "off",
        "@typescript-eslint/require-await": "off",

        // Enforce consistent returning of awaited values  ðŸ”§ ðŸ›  ðŸ’­
        "return-await": "off",
        "@typescript-eslint/return-await": "off", // TODO: Enable rule

        // Require or disallow semicolons instead of ASI  ðŸ”§
        "semi": "off",
        "@typescript-eslint/semi": [ "error", "always" ],

        // Enforce consistent spacing before blocks  ðŸ”§
        "space-before-blocks": "off",
        "@typescript-eslint/space-before-blocks": "error",

        // Enforce consistent spacing before function parenthesis  ðŸ”§
        "space-before-function-paren": "off",
        "@typescript-eslint/space-before-function-paren": [ "error", {
          "anonymous": "never",
          "named": "never",
          "asyncArrow": "always"
        } ],

        // Require spacing around infix operators  ðŸ”§
        "space-infix-ops": "off",
        "@typescript-eslint/space-infix-ops": "error"

        ////////////////////////////////////////////////////////////////////////
        // Custom TypeScript Rules

        // Custom return type rule that only requires for methods. The includes return type was too overarching.
//        "explicit-method-return-type": "error"
      }
}